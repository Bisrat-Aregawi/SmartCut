import { elementMaker, TreeNode } from './utilities.js';

/**
  * Function Creates Tree structure for projects fetched form database. Root
  * and successive children will be of type TreeNode. Constructed Tree is not
  * reusable but changeable to other layouts per user's need.
  * @param {string} project Name of project.
  * @param {string} customer Name of customer.
  * @param {Date} began Date project started.
  * @param {Date} ends Date project ended.
  * @returns TreeNode projectCard tree structure.
  */
function makeProjectCard (project, customer, began, ends) {
  // Construct root level DOM Element as TreeNode object
  const projectCard = new TreeNode(elementMaker('button'));

  // Assign required classes list to created element
  projectCard.element.classList.add(
    ...['list-group-item', 'list-group-item-action']
  );
  // Populate children attribute of projectCard with TreeNode type objects
  projectCard.children = childArray(
    {
      elem: 'div',
      classList: ['d-flex', 'w-100', 'justify-content-between'],
      content: ''
    },
    { elem: 'h6', classList: ['mb-1'], content: `CUSTOMER: ${customer}` },
    { elem: 'hr', classList: [], content: '' },
    {
      elem: 'p',
      classList: ['mb-1'],
      content: 'Small Placeholder in a paragraph'
    },
    { elem: 'div', classList: ['row', 'gx-3'], content: '' }
  );
  // Populate children of first child of projectCard
  projectCard.children[0].children = childArray(
    { elem: 'h5', classList: ['mb-1'], content: project },
    { elem: 'span', classList: ['badge', 'bg-success'], content: 'on going' }
  );
  // Populate children of last child of projectcard
  projectCard.children[4].children = childArray(
    { elem: 'div', classList: ['col'], content: '' },
    { elem: 'div', classList: ['col'], content: '' }
  );
  // Populate children of first child of last child of projectcard
  projectCard.children[4].children[0].children = childArray(
    {
      elem: 'div',
      classList: ['col', 'border', 'rounded-3', 'fs-6', 'fw-light'],
      content: ''
    }
  );
  // Populate children of second child of last child of projectcard
  projectCard.children[4].children[1].children = childArray(
    {
      elem: 'div',
      classList: ['col', 'border', 'rounded-3', 'fs-6', 'fw-light'],
      content: ''
    }
  );
  // Populate children of first child of first child last child of projectcard
  projectCard.children[4].children[0].children[0].children = childArray(
    { elem: 'small', classList: [], content: `Start: ${began}` }
  );
  // Populate children of first child of second child last child of projectcard
  projectCard.children[4].children[1].children[0].children = childArray(
    { elem: 'small', classList: [], content: `End: ${ends}` }
  );
  // Return projectCard tree structure
  return projectCard;
}

/**
  * Return a childrens array according to provided objects array.
  * @param {Array} ...arr Spreaded arguments array
  * @returns {Array} Array of children where each element is typeof TreeNode
  */
function childArray (...arr) {
  // Define chidren array to hold all children objects
  const children = [];
  /**
    * For each object in ...arr, construct TreeNode object with their element
    * attributes given a class list and inner text and when finished appended
    * to children array.
    */
  for (let i = 0; i < arr.length; i++) {
    const obj = new TreeNode(elementMaker(arr[i].elem));
    if (arr[i].classList !== []) obj.element.classList.add(...arr[i].classList);
    if (arr[i].content !== '') obj.element.innerText = arr[i].content;
    children.push(obj);
  }
  // Return children array
  return children;
}

/**
  * Recursively construct DOM Tree of provided parameter. Provided parameter
  * is a tree structure containing root element and childrens array for each
  * node.
  * @param {TreeNode} card A tree structure generated by makeProjectCard
  * @returns {HTMLElement} Fully constructed HTML parent Element.
  */
function makeProjectCardTree (card) {
  /**
    * If card parameter has children, then for each child recursively append
    * its children and when done return that child. All levels of card tree
    * will be traversed.
    */
  if (card.children.length !== 0) {
    for (let i = 0; i < card.children.length; i++) {
      card.element.append(makeProjectCardTree(card.children[i]).element);
    }
  }
  return card;
}

export { makeProjectCardTree, makeProjectCard };
